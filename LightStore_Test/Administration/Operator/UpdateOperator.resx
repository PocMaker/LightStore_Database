<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="expectedSchemaCondition1.Configuration" xml:space="preserve">
    <value>Appuyez sur configurer</value>
  </metadata>
  <data name="Update_All_Fields_TestAction.SqlScript" xml:space="preserve">
    <value>-- test unitaire de base de données pour dbo.uspUpdateOperator
DECLARE @RC AS INT, @p_id AS INT, @p_firstName AS VARCHAR (255), @p_lastName AS VARCHAR (255), @p_email AS VARCHAR (255), @p_password AS VARCHAR (255);

SELECT @p_id = Id
FROM Administration.Operator
WHERE Login = 'Test';

SELECT @RC = 0,
       @p_id = @p_id,
       @p_firstName = 'New_FirstName',
       @p_lastName = 'New_LastName',
       @p_email = 'New_Email',
       @p_password = 'Password';

EXECUTE @RC = [Administration].[uspUpdateOperator] @p_id, @p_firstName, @p_lastName, @p_email, @p_password;

SELECT @RC AS RC;

</value>
  </data>
  <metadata name="expectedSchemaCondition1.Configuration" xml:space="preserve">
    <value>Appuyez sur configurer</value>
  </metadata>
  <data name="expectedSchemaCondition1.Schema" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAE5TeXN0ZW0uRGF0YSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJl
        PW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAABNTeXN0ZW0uRGF0YS5E
        YXRhU2V0AwAAABdEYXRhU2V0LlJlbW90aW5nVmVyc2lvbglYbWxTY2hlbWELWG1sRGlmZkdyYW0DAQEO
        U3lzdGVtLlZlcnNpb24CAAAACQMAAAAGBAAAAJoMPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0i
        dXRmLTE2Ij8+DQo8eHM6c2NoZW1hIGlkPSJOZXdEYXRhU2V0IiB4bWxucz0iIiB4bWxuczp4cz0iaHR0
        cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOm1zZGF0YT0idXJuOnNjaGVtYXMtbWlj
        cm9zb2Z0LWNvbTp4bWwtbXNkYXRhIj4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTmV3RGF0YVNldCIgbXNk
        YXRhOklzRGF0YVNldD0idHJ1ZSIgbXNkYXRhOkxvY2FsZT0iZnItRlIiPg0KICAgIDx4czpjb21wbGV4
        VHlwZT4NCiAgICAgIDx4czpjaG9pY2UgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCI+
        DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IlRhYmxlIj4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5
        cGU+DQogICAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5h
        bWU9IklkIiB0eXBlPSJ4czppbnQiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIw
        IiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBuYW1lPSJGaXJzdE5hbWUiIHR5cGU9InhzOnN0
        cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAg
        ICAgIDx4czplbGVtZW50IG5hbWU9Ikxhc3ROYW1lIiB0eXBlPSJ4czpzdHJpbmciIG1zZGF0YTp0YXJn
        ZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0KICAgICAgICAgICAgICA8eHM6ZWxlbWVudCBu
        YW1lPSJMb2dpbiIgdHlwZT0ieHM6c3RyaW5nIiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9j
        Y3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAgPHhzOmVsZW1lbnQgbmFtZT0iRW1haWwiIHR5cGU9Inhz
        OnN0cmluZyIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAg
        ICAgICAgIDx4czplbGVtZW50IG5hbWU9IklzUGFzc3dvcmREZWZpbmVkIiB0eXBlPSJ4czpib29sZWFu
        IiBtc2RhdGE6dGFyZ2V0TmFtZXNwYWNlPSIiIG1pbk9jY3Vycz0iMCIgLz4NCiAgICAgICAgICAgICAg
        PHhzOmVsZW1lbnQgbmFtZT0iTW9kaWZpZWREYXRlIiB0eXBlPSJ4czpkYXRlVGltZSIgbXNkYXRhOnRh
        cmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICA8L3hzOnNlcXVlbmNl
        Pg0KICAgICAgICAgIDwveHM6Y29tcGxleFR5cGU+DQogICAgICAgIDwveHM6ZWxlbWVudD4NCiAgICAg
        ICAgPHhzOmVsZW1lbnQgbmFtZT0iVGFibGUxIj4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5cGU+DQog
        ICAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IlJD
        IiB0eXBlPSJ4czppbnQiIG1zZGF0YTp0YXJnZXROYW1lc3BhY2U9IiIgbWluT2NjdXJzPSIwIiAvPg0K
        ICAgICAgICAgICAgPC94czpzZXF1ZW5jZT4NCiAgICAgICAgICA8L3hzOmNvbXBsZXhUeXBlPg0KICAg
        ICAgICA8L3hzOmVsZW1lbnQ+DQogICAgICA8L3hzOmNob2ljZT4NCiAgICA8L3hzOmNvbXBsZXhUeXBl
        Pg0KICA8L3hzOmVsZW1lbnQ+DQo8L3hzOnNjaGVtYT4GBQAAAIABPGRpZmZncjpkaWZmZ3JhbSB4bWxu
        czptc2RhdGE9InVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206eG1sLW1zZGF0YSIgeG1sbnM6ZGlmZmdy
        PSJ1cm46c2NoZW1hcy1taWNyb3NvZnQtY29tOnhtbC1kaWZmZ3JhbS12MSIgLz4EAwAAAA5TeXN0ZW0u
        VmVyc2lvbgQAAAAGX01ham9yBl9NaW5vcgZfQnVpbGQJX1JldmlzaW9uAAAAAAgICAgCAAAAAAAAAP//
        ////////Cw==
</value>
  </data>
  <data name="Update_All_Fields_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL que vous voulez exécuter avant
l'exécution du script de test.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
IF (NOT EXISTS(SELECT TOP 1 1 FROM Administration.Operator WHERE Login = 'Test'))
EXEC Administration.uspCreateOperator 'FirstName', 'LastName', 'Test', NULL;</value>
  </data>
  <metadata name="expectedSchemaCondition2.Configuration" xml:space="preserve">
    <value>Appuyez sur configurer</value>
  </metadata>
  <data name="NULL_Values_Keeps_Same_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL pour utiliser l'objet de base de données 
que vous voulez tester.

Pour tester une procédure stockée, appelez-la en ajoutant 
une instruction EXEC comportant les paramètres appropriés.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
DECLARE @p_id AS int;

DECLARE @Operator TABLE
(
	Id int,
	FirstName varchar(255),
	LastName varchar(255),
	Login varchar(255),
	Email varchar(255),
	IsPasswordDefined bit,
	ModifiedDate datetime
);

INSERT INTO @Operator
EXEC Administration.uspGetOperator @p_login = 'Test';

SELECT @p_id = Id
FROM @Operator;

INSERT INTO @Operator
EXEC [Administration].[uspUpdateOperator] @p_id = @p_id;

WITH Org AS
(
	SELECT TOP 1 *
	FROM @Operator
),
New AS
(
	SELECT TOP 1 *
	FROM @Operator
	ORDER BY ModifiedDate DESC
)
SELECT CASE WHEN Org.FirstName = New.FirstName THEN 1 ELSE 0 END,
	   CASE WHEN Org.LastName = New.LastName THEN 1 ELSE 0 END,
	   CASE WHEN Org.Email = New.Email THEN 1 ELSE 0 END,
	   CASE WHEN Org.IsPasswordDefined = New.IsPasswordDefined THEN 1 ELSE 0 END,
	   CASE WHEN Org.ModifiedDate &lt; New.ModifiedDate THEN 1 ELSE 0 END
FROM Org, New;</value>
  </data>
  <metadata name="expectedSchemaCondition2.Configuration" xml:space="preserve">
    <value>Appuyez sur configurer</value>
  </metadata>
  <data name="expectedSchemaCondition2.Schema" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAE5TeXN0ZW0uRGF0YSwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJl
        PW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAABNTeXN0ZW0uRGF0YS5E
        YXRhU2V0AwAAABdEYXRhU2V0LlJlbW90aW5nVmVyc2lvbglYbWxTY2hlbWELWG1sRGlmZkdyYW0DAQEO
        U3lzdGVtLlZlcnNpb24CAAAACQMAAAAGBAAAAK0IPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0i
        dXRmLTE2Ij8+DQo8eHM6c2NoZW1hIGlkPSJOZXdEYXRhU2V0IiB4bWxucz0iIiB4bWxuczp4cz0iaHR0
        cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOm1zZGF0YT0idXJuOnNjaGVtYXMtbWlj
        cm9zb2Z0LWNvbTp4bWwtbXNkYXRhIj4NCiAgPHhzOmVsZW1lbnQgbmFtZT0iTmV3RGF0YVNldCIgbXNk
        YXRhOklzRGF0YVNldD0idHJ1ZSIgbXNkYXRhOkxvY2FsZT0iZnItRlIiPg0KICAgIDx4czpjb21wbGV4
        VHlwZT4NCiAgICAgIDx4czpjaG9pY2UgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCI+
        DQogICAgICAgIDx4czplbGVtZW50IG5hbWU9IlRhYmxlIj4NCiAgICAgICAgICA8eHM6Y29tcGxleFR5
        cGU+DQogICAgICAgICAgICA8eHM6c2VxdWVuY2U+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5h
        bWU9IkNvbHVtbjEiIHR5cGU9InhzOmludCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1
        cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkNvbHVtbjIiIHR5cGU9Inhz
        OmludCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAg
        ICAgIDx4czplbGVtZW50IG5hbWU9IkNvbHVtbjMiIHR5cGU9InhzOmludCIgbXNkYXRhOnRhcmdldE5h
        bWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9
        IkNvbHVtbjQiIHR5cGU9InhzOmludCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9
        IjAiIC8+DQogICAgICAgICAgICAgIDx4czplbGVtZW50IG5hbWU9IkNvbHVtbjUiIHR5cGU9InhzOmlu
        dCIgbXNkYXRhOnRhcmdldE5hbWVzcGFjZT0iIiBtaW5PY2N1cnM9IjAiIC8+DQogICAgICAgICAgICA8
        L3hzOnNlcXVlbmNlPg0KICAgICAgICAgIDwveHM6Y29tcGxleFR5cGU+DQogICAgICAgIDwveHM6ZWxl
        bWVudD4NCiAgICAgIDwveHM6Y2hvaWNlPg0KICAgIDwveHM6Y29tcGxleFR5cGU+DQogIDwveHM6ZWxl
        bWVudD4NCjwveHM6c2NoZW1hPgYFAAAAgAE8ZGlmZmdyOmRpZmZncmFtIHhtbG5zOm1zZGF0YT0idXJu
        OnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp4bWwtbXNkYXRhIiB4bWxuczpkaWZmZ3I9InVybjpzY2hlbWFz
        LW1pY3Jvc29mdC1jb206eG1sLWRpZmZncmFtLXYxIiAvPgQDAAAADlN5c3RlbS5WZXJzaW9uBAAAAAZf
        TWFqb3IGX01pbm9yBl9CdWlsZAlfUmV2aXNpb24AAAAACAgICAIAAAAAAAAA//////////8L
</value>
  </data>
  <data name="EMPTY_Values_Reset_Email_And_Password_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL pour utiliser l'objet de base de données 
que vous voulez tester.

Pour tester une procédure stockée, appelez-la en ajoutant 
une instruction EXEC comportant les paramètres appropriés.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
DECLARE @p_id AS int;

SELECT @p_id = Id
FROM Administration.Operator
WHERE Login = 'Test';

EXEC [Administration].[uspUpdateOperator] @p_id = @p_id, @p_email = '', @p_password = '';</value>
  </data>
  <data name="EMPTY_Values_Reset_Email_And_Password_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL que vous voulez exécuter avant
l'exécution du script de test.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
IF (NOT EXISTS(SELECT TOP 1 1 FROM Administration.Operator WHERE Login = 'Test'))
EXEC Administration.uspCreateOperator 'FirstName', 'LastName', 'Test', NULL;

DECLARE @p_id AS int;

SELECT @p_id = Id
FROM Administration.Operator
WHERE Login = 'Test';

EXEC [Administration].[uspUpdateOperator] @p_id = @p_id, @p_email = 'test', @p_password = 'password';</value>
  </data>
  <data name="NULL_Values_Keeps_Same_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL que vous voulez exécuter avant
l'exécution du script de test.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
IF (NOT EXISTS(SELECT TOP 1 1 FROM Administration.Operator WHERE Login = 'Test'))
EXEC Administration.uspCreateOperator 'FirstName', 'LastName', 'Test', NULL;</value>
  </data>
  <data name="Update_Password_Set_Password_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL pour utiliser l'objet de base de données 
que vous voulez tester.

Pour tester une procédure stockée, appelez-la en ajoutant 
une instruction EXEC comportant les paramètres appropriés.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
DECLARE @p_id AS int;

SELECT @p_id = Id
FROM Administration.Operator
WHERE Login = 'Test';

EXEC [Administration].[uspUpdateOperator] @p_id = @p_id, @p_password = 'password';</value>
  </data>
  <data name="Update_Password_Set_Password_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL que vous voulez exécuter avant
l'exécution du script de test.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
IF (NOT EXISTS(SELECT TOP 1 1 FROM Administration.Operator WHERE Login = 'Test'))
EXEC Administration.uspCreateOperator 'FirstName', 'LastName', 'Test', NULL;

DECLARE @p_id AS int;

SELECT @p_id = Id
FROM Administration.Operator
WHERE Login = 'Test';

--Reset Password
EXEC [Administration].[uspUpdateOperator] @p_id = @p_id, @p_password = '';</value>
  </data>
  <data name="Error_FirstName_EMPTY_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL pour utiliser l'objet de base de données 
que vous voulez tester.

Pour tester une procédure stockée, appelez-la en ajoutant 
une instruction EXEC comportant les paramètres appropriés.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
DECLARE @RC AS INT, @p_id AS INT, @p_firstName AS VARCHAR (255), @p_lastName AS VARCHAR (255), @p_email AS VARCHAR (255), @p_password AS VARCHAR (255);

SELECT @p_id = Id
FROM Administration.Operator
WHERE Login = 'Test';

SELECT @RC = 0,
       @p_id = @p_id,
       @p_firstName = '',
       @p_lastName = 'New_LastName',
       @p_email = 'New_Email',
       @p_password = 'Password';

EXECUTE @RC = [Administration].[uspUpdateOperator] @p_id, @p_firstName, @p_lastName, @p_email, @p_password;

SELECT @RC AS RC;

</value>
  </data>
  <data name="Error_LastName_EMPTY_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL pour utiliser l'objet de base de données 
que vous voulez tester.

Pour tester une procédure stockée, appelez-la en ajoutant 
une instruction EXEC comportant les paramètres appropriés.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
DECLARE @RC AS INT, @p_id AS INT, @p_firstName AS VARCHAR (255), @p_lastName AS VARCHAR (255), @p_email AS VARCHAR (255), @p_password AS VARCHAR (255);

SELECT @p_id = Id
FROM Administration.Operator
WHERE Login = 'Test';

SELECT @RC = 0,
       @p_id = @p_id,
       @p_firstName = 'New_LastName',
       @p_lastName = '',
       @p_email = 'New_Email',
       @p_password = 'Password';

EXECUTE @RC = [Administration].[uspUpdateOperator] @p_id, @p_firstName, @p_lastName, @p_email, @p_password;

SELECT @RC AS RC;

</value>
  </data>
  <data name="Error_Unknown_Operator_TestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL pour utiliser l'objet de base de données 
que vous voulez tester.

Pour tester une procédure stockée, appelez-la en ajoutant 
une instruction EXEC comportant les paramètres appropriés.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
EXECUTE [Administration].[uspUpdateOperator] @p_id = -1;

</value>
  </data>
  <data name="Error_FirstName_EMPTY_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL que vous voulez exécuter avant
l'exécution du script de test.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
IF (NOT EXISTS(SELECT TOP 1 1 FROM Administration.Operator WHERE Login = 'Test'))
EXEC Administration.uspCreateOperator 'FirstName', 'LastName', 'Test', NULL;
</value>
  </data>
  <data name="Error_LastName_EMPTY_PretestAction.SqlScript" xml:space="preserve">
    <value>/*
Ajoutez ici les instructions SQL que vous voulez exécuter avant
l'exécution du script de test.

Dans le volet inférieur, vous pouvez ajouter des conditions de test qui vérifient 
si les résultats de vos instructions SQL répondent à vos 
attentes.
*/
IF (NOT EXISTS(SELECT TOP 1 1 FROM Administration.Operator WHERE Login = 'Test'))
EXEC Administration.uspCreateOperator 'FirstName', 'LastName', 'Test', NULL;
</value>
  </data>
  <metadata name="$this.Localizable" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
</root>